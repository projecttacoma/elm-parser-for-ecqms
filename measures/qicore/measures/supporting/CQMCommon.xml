<?xml version="1.0" encoding="UTF-8"?>
<library xmlns="urn:hl7-org:elm:r1" xmlns:t="urn:hl7-org:elm-types:r1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:fhir="http://hl7.org/fhir" xmlns:qdm43="urn:healthit-gov:qdm:v4_3" xmlns:qdm53="urn:healthit-gov:qdm:v5_3" xmlns:a="urn:hl7-org:cql-annotations:r1">
   <annotation translatorOptions="" xsi:type="a:CqlToElmInfo"/>
   <identifier id="CQMCommon" version="1.1.000"/>
   <schemaIdentifier id="urn:hl7-org:elm" version="r1"/>
   <usings>
      <def localIdentifier="System" uri="urn:hl7-org:elm-types:r1"/>
      <def localIdentifier="QICore" uri="http://hl7.org/fhir"/>
   </usings>
   <includes>
      <def localIdentifier="FHIRHelpers" path="FHIRHelpers" version="4.1.000"/>
      <def localIdentifier="QICoreCommon" path="QICoreCommon" version="1.3.000"/>
   </includes>
   <parameters>
      <def name="Measurement Period" accessLevel="Public">
         <default lowClosed="true" highClosed="false" xsi:type="Interval">
            <low xsi:type="DateTime">
               <year valueType="t:Integer" value="2022" xsi:type="Literal"/>
               <month valueType="t:Integer" value="1" xsi:type="Literal"/>
               <day valueType="t:Integer" value="1" xsi:type="Literal"/>
               <hour valueType="t:Integer" value="0" xsi:type="Literal"/>
               <minute valueType="t:Integer" value="0" xsi:type="Literal"/>
               <second valueType="t:Integer" value="0" xsi:type="Literal"/>
               <millisecond valueType="t:Integer" value="0" xsi:type="Literal"/>
            </low>
            <high xsi:type="DateTime">
               <year valueType="t:Integer" value="2023" xsi:type="Literal"/>
               <month valueType="t:Integer" value="1" xsi:type="Literal"/>
               <day valueType="t:Integer" value="1" xsi:type="Literal"/>
               <hour valueType="t:Integer" value="0" xsi:type="Literal"/>
               <minute valueType="t:Integer" value="0" xsi:type="Literal"/>
               <second valueType="t:Integer" value="0" xsi:type="Literal"/>
               <millisecond valueType="t:Integer" value="0" xsi:type="Literal"/>
            </high>
         </default>
         <parameterTypeSpecifier xsi:type="IntervalTypeSpecifier">
            <pointType name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
         </parameterTypeSpecifier>
      </def>
   </parameters>
   <valueSets>
      <def name="Emergency Department Visit" id="http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.117.1.7.1.292" accessLevel="Public"/>
      <def name="Encounter Inpatient" id="http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113883.3.666.5.307" accessLevel="Public"/>
      <def name="Intensive Care Unit" id="http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1029.206" accessLevel="Public"/>
      <def name="Observation Services" id="http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1111.143" accessLevel="Public"/>
      <def name="Outpatient Surgery Service" id="http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1110.38" accessLevel="Public"/>
      <def name="Present on Admission or Clinically Undetermined" id="http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1147.197" accessLevel="Public"/>
   </valueSets>
   <contexts>
      <def name="Patient"/>
   </contexts>
   <statements>
      <def name="Patient" context="Patient">
         <expression xsi:type="SingletonFrom">
            <operand dataType="fhir:Patient" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-patient" xsi:type="Retrieve"/>
         </expression>
      </def>
      <def name="LengthInDays" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Calculates the difference in calendar days between the start and end of the given interval."/>
            <a:t name="deprecated" value="This function in deprecated. Use the fluent function `lengthInDays()` instead."/>
         </annotation>
         <expression precision="Day" xsi:type="DifferenceBetween">
            <operand xsi:type="Start">
               <operand name="Value" xsi:type="OperandRef"/>
            </operand>
            <operand xsi:type="End">
               <operand name="Value" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand name="Value">
            <operandTypeSpecifier xsi:type="IntervalTypeSpecifier">
               <pointType name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def name="Inpatient Encounter" context="Patient" accessLevel="Public">
         <expression xsi:type="Query">
            <source alias="EncounterInpatient">
               <expression dataType="fhir:Encounter" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                  <codes name="Encounter Inpatient" preserve="true" xsi:type="ValueSetRef"/>
               </expression>
            </source>
            <where xsi:type="And">
               <operand xsi:type="And">
                  <operand xsi:type="Equal">
                     <operand path="value" xsi:type="Property">
                        <source path="status" scope="EncounterInpatient" xsi:type="Property"/>
                     </operand>
                     <operand valueType="t:String" value="finished" xsi:type="Literal"/>
                  </operand>
                  <operand xsi:type="LessOrEqual">
                     <operand name="LengthInDays" xsi:type="FunctionRef">
                        <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand path="period" scope="EncounterInpatient" xsi:type="Property"/>
                        </operand>
                     </operand>
                     <operand valueType="t:Integer" value="120" xsi:type="Literal"/>
                  </operand>
               </operand>
               <operand precision="Day" xsi:type="In">
                  <operand xsi:type="End">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" scope="EncounterInpatient" xsi:type="Property"/>
                     </operand>
                  </operand>
                  <operand name="Measurement Period" xsi:type="ParameterRef"/>
               </operand>
            </where>
         </expression>
      </def>
      <def name="ToDateInterval" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns an interval of date values extracted from the input interval of date-time values"/>
            <a:t name="comment" value="This function returns an interval constructed using the `date from` extractor on the start&#xa;and end values of the input date-time interval. Note that using a precision specifier such as `day of`&#xa;as part of a timing phrase is preferred to communicate intent to perform day-level comparison, as well&#xa;as for general readability."/>
         </annotation>
         <expression lowClosed="true" highClosed="true" xsi:type="Interval">
            <low xsi:type="DateFrom">
               <operand xsi:type="Start">
                  <operand name="period" xsi:type="OperandRef"/>
               </operand>
            </low>
            <high xsi:type="DateFrom">
               <operand xsi:type="End">
                  <operand name="period" xsi:type="OperandRef"/>
               </operand>
            </high>
         </expression>
         <operand name="period">
            <operandTypeSpecifier xsi:type="IntervalTypeSpecifier">
               <pointType name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def name="lengthInDays" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Calculates the difference in calendar days between the start and end of the given interval."/>
         </annotation>
         <expression precision="Day" xsi:type="DifferenceBetween">
            <operand xsi:type="Start">
               <operand name="Value" xsi:type="OperandRef"/>
            </operand>
            <operand xsi:type="End">
               <operand name="Value" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand name="Value">
            <operandTypeSpecifier xsi:type="IntervalTypeSpecifier">
               <pointType name="t:DateTime" xsi:type="NamedTypeSpecifier"/>
            </operandTypeSpecifier>
         </operand>
      </def>
      <def name="ED Visit" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the most recent emergency department visit, if any, that occurs 1 hour or less prior to the given encounter."/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `edVisit()` instead."/>
         </annotation>
         <expression xsi:type="Last">
            <source xsi:type="Query">
               <source alias="EDVisit">
                  <expression dataType="fhir:Encounter" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                     <codes name="Emergency Department Visit" preserve="true" xsi:type="ValueSetRef"/>
                  </expression>
               </source>
               <where xsi:type="And">
                  <operand xsi:type="Equal">
                     <operand path="value" xsi:type="Property">
                        <source path="status" scope="EDVisit" xsi:type="Property"/>
                     </operand>
                     <operand valueType="t:String" value="finished" xsi:type="Literal"/>
                  </operand>
                  <operand xsi:type="And">
                     <operand xsi:type="In">
                        <operand xsi:type="End">
                           <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                              <operand path="period" scope="EDVisit" xsi:type="Property"/>
                           </operand>
                        </operand>
                        <operand lowClosed="true" highClosed="true" xsi:type="Interval">
                           <low xsi:type="Subtract">
                              <operand xsi:type="Start">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand path="period" xsi:type="Property">
                                       <source name="TheEncounter" xsi:type="OperandRef"/>
                                    </operand>
                                 </operand>
                              </operand>
                              <operand value="1" unit="hour" xsi:type="Quantity"/>
                           </low>
                           <high xsi:type="Start">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand path="period" xsi:type="Property">
                                    <source name="TheEncounter" xsi:type="OperandRef"/>
                                 </operand>
                              </operand>
                           </high>
                        </operand>
                     </operand>
                     <operand xsi:type="Not">
                        <operand xsi:type="IsNull">
                           <operand xsi:type="Start">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand path="period" xsi:type="Property">
                                    <source name="TheEncounter" xsi:type="OperandRef"/>
                                 </operand>
                              </operand>
                           </operand>
                        </operand>
                     </operand>
                  </operand>
               </where>
               <sort>
                  <by direction="asc" xsi:type="ByExpression">
                     <expression xsi:type="End">
                        <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand name="period" xsi:type="IdentifierRef"/>
                        </operand>
                     </expression>
                  </by>
               </sort>
            </source>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="edVisit" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the most recent emergency department visit, if any, that occurs 1 hour or less prior to the given encounter."/>
         </annotation>
         <expression xsi:type="Last">
            <source xsi:type="Query">
               <source alias="EDVisit">
                  <expression dataType="fhir:Encounter" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                     <codes name="Emergency Department Visit" preserve="true" xsi:type="ValueSetRef"/>
                  </expression>
               </source>
               <where xsi:type="And">
                  <operand xsi:type="Equal">
                     <operand path="value" xsi:type="Property">
                        <source path="status" scope="EDVisit" xsi:type="Property"/>
                     </operand>
                     <operand valueType="t:String" value="finished" xsi:type="Literal"/>
                  </operand>
                  <operand xsi:type="And">
                     <operand xsi:type="In">
                        <operand xsi:type="End">
                           <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                              <operand path="period" scope="EDVisit" xsi:type="Property"/>
                           </operand>
                        </operand>
                        <operand lowClosed="true" highClosed="true" xsi:type="Interval">
                           <low xsi:type="Subtract">
                              <operand xsi:type="Start">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand path="period" xsi:type="Property">
                                       <source name="TheEncounter" xsi:type="OperandRef"/>
                                    </operand>
                                 </operand>
                              </operand>
                              <operand value="1" unit="hour" xsi:type="Quantity"/>
                           </low>
                           <high xsi:type="Start">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand path="period" xsi:type="Property">
                                    <source name="TheEncounter" xsi:type="OperandRef"/>
                                 </operand>
                              </operand>
                           </high>
                        </operand>
                     </operand>
                     <operand xsi:type="Not">
                        <operand xsi:type="IsNull">
                           <operand xsi:type="Start">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand path="period" xsi:type="Property">
                                    <source name="TheEncounter" xsi:type="OperandRef"/>
                                 </operand>
                              </operand>
                           </operand>
                        </operand>
                     </operand>
                  </operand>
               </where>
               <sort>
                  <by direction="asc" xsi:type="ByExpression">
                     <expression xsi:type="End">
                        <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand name="period" xsi:type="IdentifierRef"/>
                        </operand>
                     </expression>
                  </by>
               </sort>
            </source>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="Hospitalization" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Hospitalization returns the total interval for admission to discharge for the given encounter, or for the admission of any immediately prior emergency department visit to the discharge of the given encounter."/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `hospitalization()` instead."/>
         </annotation>
         <expression xsi:type="Query">
            <source alias="X">
               <expression name="ED Visit" xsi:type="FunctionRef">
                  <operand name="TheEncounter" xsi:type="OperandRef"/>
               </expression>
            </source>
            <return>
               <expression xsi:type="If">
                  <condition xsi:type="IsNull">
                     <operand name="X" xsi:type="AliasRef"/>
                  </condition>
                  <then name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand path="period" xsi:type="Property">
                        <source name="TheEncounter" xsi:type="OperandRef"/>
                     </operand>
                  </then>
                  <else lowClosed="true" highClosed="false" xsi:type="Interval">
                     <low xsi:type="Start">
                        <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand path="period" scope="X" xsi:type="Property"/>
                        </operand>
                     </low>
                     <high xsi:type="End">
                        <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand path="period" xsi:type="Property">
                              <source name="TheEncounter" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                     </high>
                  </else>
               </expression>
            </return>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="hospitalization" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Hospitalization returns the total interval for admission to discharge for the given encounter, or for the admission of any immediately prior emergency department visit to the discharge of the given encounter."/>
         </annotation>
         <expression xsi:type="Query">
            <source alias="X">
               <expression name="ED Visit" xsi:type="FunctionRef">
                  <operand name="TheEncounter" xsi:type="OperandRef"/>
               </expression>
            </source>
            <return>
               <expression xsi:type="If">
                  <condition xsi:type="IsNull">
                     <operand name="X" xsi:type="AliasRef"/>
                  </condition>
                  <then name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                     <operand path="period" xsi:type="Property">
                        <source name="TheEncounter" xsi:type="OperandRef"/>
                     </operand>
                  </then>
                  <else lowClosed="true" highClosed="true" xsi:type="Interval">
                     <low xsi:type="Start">
                        <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand path="period" scope="X" xsi:type="Property"/>
                        </operand>
                     </low>
                     <high xsi:type="End">
                        <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand path="period" xsi:type="Property">
                              <source name="TheEncounter" xsi:type="OperandRef"/>
                           </operand>
                        </operand>
                     </high>
                  </else>
               </expression>
            </return>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="Hospitalization Locations" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns list of all locations within an encounter, including locations for immediately prior ED visit."/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `hospitalizationLocations()` instead."/>
         </annotation>
         <expression xsi:type="Query">
            <source alias="EDEncounter">
               <expression name="ED Visit" xsi:type="FunctionRef">
                  <operand name="TheEncounter" xsi:type="OperandRef"/>
               </expression>
            </source>
            <return>
               <expression xsi:type="If">
                  <condition xsi:type="IsNull">
                     <operand name="EDEncounter" xsi:type="AliasRef"/>
                  </condition>
                  <then path="location" xsi:type="Property">
                     <source name="TheEncounter" xsi:type="OperandRef"/>
                  </then>
                  <else xsi:type="Flatten">
                     <operand xsi:type="List">
                        <element path="location" scope="EDEncounter" xsi:type="Property"/>
                        <element path="location" xsi:type="Property">
                           <source name="TheEncounter" xsi:type="OperandRef"/>
                        </element>
                     </operand>
                  </else>
               </expression>
            </return>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="hospitalizationLocations" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns list of all locations within an encounter, including locations for immediately prior ED visit."/>
         </annotation>
         <expression xsi:type="Query">
            <source alias="EDEncounter">
               <expression name="ED Visit" xsi:type="FunctionRef">
                  <operand name="TheEncounter" xsi:type="OperandRef"/>
               </expression>
            </source>
            <return>
               <expression xsi:type="If">
                  <condition xsi:type="IsNull">
                     <operand name="EDEncounter" xsi:type="AliasRef"/>
                  </condition>
                  <then path="location" xsi:type="Property">
                     <source name="TheEncounter" xsi:type="OperandRef"/>
                  </then>
                  <else xsi:type="Flatten">
                     <operand xsi:type="List">
                        <element path="location" scope="EDEncounter" xsi:type="Property"/>
                        <element path="location" xsi:type="Property">
                           <source name="TheEncounter" xsi:type="OperandRef"/>
                        </element>
                     </operand>
                  </else>
               </expression>
            </return>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="Hospitalization Length of Stay" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the length of stay in days (i.e. the number of days between admission and discharge) for the given encounter, or from the admission of any immediately prior emergency department visit to the discharge of the encounter"/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `hospitalizationLengthOfStay()` instead."/>
         </annotation>
         <expression name="LengthInDays" xsi:type="FunctionRef">
            <operand name="Hospitalization" xsi:type="FunctionRef">
               <operand name="TheEncounter" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="hospitalizationLengthOfStay" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the length of stay in days (i.e. the number of days between admission and discharge) for the given encounter, or from the admission of any immediately prior emergency department visit to the discharge of the encounter"/>
         </annotation>
         <expression name="LengthInDays" xsi:type="FunctionRef">
            <operand name="Hospitalization" xsi:type="FunctionRef">
               <operand name="TheEncounter" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="Hospital Admission Time" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns admission time for an encounter or for immediately prior emergency department visit."/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `hospitalAdmissionTime()` instead."/>
         </annotation>
         <expression xsi:type="Start">
            <operand name="Hospitalization" xsi:type="FunctionRef">
               <operand name="TheEncounter" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="hospitalAdmissionTime" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns admission time for an encounter or for immediately prior emergency department visit."/>
         </annotation>
         <expression xsi:type="Start">
            <operand name="Hospitalization" xsi:type="FunctionRef">
               <operand name="TheEncounter" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="Hospital Discharge Time" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Hospital Discharge Time returns the discharge time for an encounter"/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `hospitalDischargeTime()` instead."/>
         </annotation>
         <expression xsi:type="End">
            <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
               <operand path="period" xsi:type="Property">
                  <source name="TheEncounter" xsi:type="OperandRef"/>
               </operand>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="hospitalDischargeTime" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Hospital Discharge Time returns the discharge time for an encounter"/>
         </annotation>
         <expression xsi:type="End">
            <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
               <operand path="period" xsi:type="Property">
                  <source name="TheEncounter" xsi:type="OperandRef"/>
               </operand>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="Hospital Arrival Time" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns earliest arrival time for an encounter including any prior ED visit."/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `hospitalArrivalTime()` instead."/>
         </annotation>
         <expression xsi:type="Start">
            <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
               <operand path="period" xsi:type="Property">
                  <source xsi:type="First">
                     <source xsi:type="Query">
                        <source alias="HospitalLocation">
                           <expression name="Hospitalization Locations" xsi:type="FunctionRef">
                              <operand name="TheEncounter" xsi:type="OperandRef"/>
                           </expression>
                        </source>
                        <sort>
                           <by direction="asc" xsi:type="ByExpression">
                              <expression xsi:type="Start">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand name="period" xsi:type="IdentifierRef"/>
                                 </operand>
                              </expression>
                           </by>
                        </sort>
                     </source>
                  </source>
               </operand>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="hospitalArrivalTime" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns earliest arrival time for an encounter including any prior ED visit."/>
         </annotation>
         <expression xsi:type="Start">
            <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
               <operand path="period" xsi:type="Property">
                  <source xsi:type="First">
                     <source xsi:type="Query">
                        <source alias="HospitalLocation">
                           <expression name="Hospitalization Locations" xsi:type="FunctionRef">
                              <operand name="TheEncounter" xsi:type="OperandRef"/>
                           </expression>
                        </source>
                        <sort>
                           <by direction="asc" xsi:type="ByExpression">
                              <expression xsi:type="Start">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand name="period" xsi:type="IdentifierRef"/>
                                 </operand>
                              </expression>
                           </by>
                        </sort>
                     </source>
                  </source>
               </operand>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="Hospital Departure Time" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the latest departure time for encounter including any prior ED visit."/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `hospitalDepartureTime()` instead."/>
         </annotation>
         <expression xsi:type="End">
            <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
               <operand path="period" xsi:type="Property">
                  <source xsi:type="Last">
                     <source xsi:type="Query">
                        <source alias="HospitalLocation">
                           <expression name="Hospitalization Locations" xsi:type="FunctionRef">
                              <operand name="TheEncounter" xsi:type="OperandRef"/>
                           </expression>
                        </source>
                        <sort>
                           <by direction="asc" xsi:type="ByExpression">
                              <expression xsi:type="Start">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand name="period" xsi:type="IdentifierRef"/>
                                 </operand>
                              </expression>
                           </by>
                        </sort>
                     </source>
                  </source>
               </operand>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="hospitalDepartureTime" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the latest departure time for encounter including any prior ED visit."/>
         </annotation>
         <expression xsi:type="End">
            <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
               <operand path="period" xsi:type="Property">
                  <source xsi:type="Last">
                     <source xsi:type="Query">
                        <source alias="HospitalLocation">
                           <expression name="Hospitalization Locations" xsi:type="FunctionRef">
                              <operand name="TheEncounter" xsi:type="OperandRef"/>
                           </expression>
                        </source>
                        <sort>
                           <by direction="asc" xsi:type="ByExpression">
                              <expression xsi:type="Start">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand name="period" xsi:type="IdentifierRef"/>
                                 </operand>
                              </expression>
                           </by>
                        </sort>
                     </source>
                  </source>
               </operand>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="GetLocation" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the Location resource specified by the given reference"/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `getLocation()` instead."/>
         </annotation>
         <expression xsi:type="SingletonFrom">
            <operand xsi:type="Query">
               <source alias="L">
                  <expression dataType="fhir:Location" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-location" xsi:type="Retrieve"/>
               </source>
               <where xsi:type="Equal">
                  <operand path="value" xsi:type="Property">
                     <source path="id" scope="L" xsi:type="Property"/>
                  </operand>
                  <operand name="getId" libraryName="QICoreCommon" xsi:type="FunctionRef">
                     <operand path="value" xsi:type="Property">
                        <source path="reference" xsi:type="Property">
                           <source name="reference" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                  </operand>
               </where>
            </operand>
         </expression>
         <operand name="reference">
            <operandTypeSpecifier name="fhir:Reference" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="Emergency Department Arrival Time" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the emergency department arrival time for the encounter."/>
         </annotation>
         <expression xsi:type="Start">
            <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
               <operand path="period" xsi:type="Property">
                  <source xsi:type="SingletonFrom">
                     <operand xsi:type="Query">
                        <source alias="HospitalLocation">
                           <expression name="Hospitalization Locations" xsi:type="FunctionRef">
                              <operand name="TheEncounter" xsi:type="OperandRef"/>
                           </expression>
                        </source>
                        <where xsi:type="AnyInValueSet">
                           <codes xsi:type="Query">
                              <source alias="$this">
                                 <expression path="type" xsi:type="Property">
                                    <source name="GetLocation" xsi:type="FunctionRef">
                                       <operand path="location" scope="HospitalLocation" xsi:type="Property"/>
                                    </source>
                                 </expression>
                              </source>
                              <return distinct="false">
                                 <expression name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand name="$this" xsi:type="AliasRef"/>
                                 </expression>
                              </return>
                           </codes>
                           <valueset name="Emergency Department Visit" preserve="true"/>
                        </where>
                     </operand>
                  </source>
               </operand>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="emergencyDepartmentArrivalTime" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the emergency department arrival time for the encounter."/>
         </annotation>
         <expression xsi:type="Start">
            <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
               <operand path="period" xsi:type="Property">
                  <source xsi:type="SingletonFrom">
                     <operand xsi:type="Query">
                        <source alias="HospitalLocation">
                           <expression name="Hospitalization Locations" xsi:type="FunctionRef">
                              <operand name="TheEncounter" xsi:type="OperandRef"/>
                           </expression>
                        </source>
                        <where xsi:type="AnyInValueSet">
                           <codes xsi:type="Query">
                              <source alias="$this">
                                 <expression path="type" xsi:type="Property">
                                    <source name="GetLocation" xsi:type="FunctionRef">
                                       <operand path="location" scope="HospitalLocation" xsi:type="Property"/>
                                    </source>
                                 </expression>
                              </source>
                              <return distinct="false">
                                 <expression name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand name="$this" xsi:type="AliasRef"/>
                                 </expression>
                              </return>
                           </codes>
                           <valueset name="Emergency Department Visit" preserve="true"/>
                        </where>
                     </operand>
                  </source>
               </operand>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="HospitalizationWithObservationAndOutpatientSurgeryService" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Hospitalization with Observation and Outpatient Surgery Service returns the total interval from the start of any immediately prior emergency department visit, outpatient surgery visit or observation visit to the discharge of the given encounter."/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `hospitalizationWithObservationAndOutpatientSurgeryService()` instead."/>
         </annotation>
         <expression xsi:type="Query">
            <source alias="Visit">
               <expression name="TheEncounter" xsi:type="OperandRef"/>
            </source>
            <let identifier="ObsVisit">
               <expression xsi:type="Last">
                  <source xsi:type="Query">
                     <source alias="LastObs">
                        <expression dataType="fhir:Encounter" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                           <codes name="Observation Services" preserve="true" xsi:type="ValueSetRef"/>
                        </expression>
                     </source>
                     <where xsi:type="And">
                        <operand xsi:type="Equal">
                           <operand path="value" xsi:type="Property">
                              <source path="status" scope="LastObs" xsi:type="Property"/>
                           </operand>
                           <operand valueType="t:String" value="finished" xsi:type="Literal"/>
                        </operand>
                        <operand xsi:type="And">
                           <operand xsi:type="In">
                              <operand xsi:type="End">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand path="period" scope="LastObs" xsi:type="Property"/>
                                 </operand>
                              </operand>
                              <operand lowClosed="true" highClosed="true" xsi:type="Interval">
                                 <low xsi:type="Subtract">
                                    <operand xsi:type="Start">
                                       <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                          <operand path="period" scope="Visit" xsi:type="Property"/>
                                       </operand>
                                    </operand>
                                    <operand value="1" unit="hour" xsi:type="Quantity"/>
                                 </low>
                                 <high xsi:type="Start">
                                    <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                       <operand path="period" scope="Visit" xsi:type="Property"/>
                                    </operand>
                                 </high>
                              </operand>
                           </operand>
                           <operand xsi:type="Not">
                              <operand xsi:type="IsNull">
                                 <operand xsi:type="Start">
                                    <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                       <operand path="period" scope="Visit" xsi:type="Property"/>
                                    </operand>
                                 </operand>
                              </operand>
                           </operand>
                        </operand>
                     </where>
                     <sort>
                        <by direction="asc" xsi:type="ByExpression">
                           <expression xsi:type="End">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand name="period" xsi:type="IdentifierRef"/>
                              </operand>
                           </expression>
                        </by>
                     </sort>
                  </source>
               </expression>
            </let>
            <let identifier="VisitStart">
               <expression xsi:type="Coalesce">
                  <operand xsi:type="Start">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" xsi:type="Property">
                           <source name="ObsVisit" xsi:type="QueryLetRef"/>
                        </operand>
                     </operand>
                  </operand>
                  <operand xsi:type="Start">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" scope="Visit" xsi:type="Property"/>
                     </operand>
                  </operand>
               </expression>
            </let>
            <let identifier="EDVisit">
               <expression xsi:type="Last">
                  <source xsi:type="Query">
                     <source alias="LastED">
                        <expression dataType="fhir:Encounter" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                           <codes name="Emergency Department Visit" preserve="true" xsi:type="ValueSetRef"/>
                        </expression>
                     </source>
                     <where xsi:type="And">
                        <operand xsi:type="Equal">
                           <operand path="value" xsi:type="Property">
                              <source path="status" scope="LastED" xsi:type="Property"/>
                           </operand>
                           <operand valueType="t:String" value="finished" xsi:type="Literal"/>
                        </operand>
                        <operand xsi:type="And">
                           <operand xsi:type="In">
                              <operand xsi:type="End">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand path="period" scope="LastED" xsi:type="Property"/>
                                 </operand>
                              </operand>
                              <operand lowClosed="true" highClosed="true" xsi:type="Interval">
                                 <low xsi:type="Subtract">
                                    <operand name="VisitStart" xsi:type="QueryLetRef"/>
                                    <operand value="1" unit="hour" xsi:type="Quantity"/>
                                 </low>
                                 <high name="VisitStart" xsi:type="QueryLetRef"/>
                              </operand>
                           </operand>
                           <operand xsi:type="Not">
                              <operand xsi:type="IsNull">
                                 <operand name="VisitStart" xsi:type="QueryLetRef"/>
                              </operand>
                           </operand>
                        </operand>
                     </where>
                     <sort>
                        <by direction="asc" xsi:type="ByExpression">
                           <expression xsi:type="End">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand name="period" xsi:type="IdentifierRef"/>
                              </operand>
                           </expression>
                        </by>
                     </sort>
                  </source>
               </expression>
            </let>
            <let identifier="VisitStartWithED">
               <expression xsi:type="Coalesce">
                  <operand xsi:type="Start">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" xsi:type="Property">
                           <source name="EDVisit" xsi:type="QueryLetRef"/>
                        </operand>
                     </operand>
                  </operand>
                  <operand name="VisitStart" xsi:type="QueryLetRef"/>
               </expression>
            </let>
            <let identifier="OutpatientSurgeryVisit">
               <expression xsi:type="Last">
                  <source xsi:type="Query">
                     <source alias="LastSurgeryOP">
                        <expression dataType="fhir:Encounter" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                           <codes name="Outpatient Surgery Service" preserve="true" xsi:type="ValueSetRef"/>
                        </expression>
                     </source>
                     <where xsi:type="And">
                        <operand xsi:type="In">
                           <operand xsi:type="End">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand path="period" scope="LastSurgeryOP" xsi:type="Property"/>
                              </operand>
                           </operand>
                           <operand lowClosed="true" highClosed="true" xsi:type="Interval">
                              <low xsi:type="Subtract">
                                 <operand name="VisitStartWithED" xsi:type="QueryLetRef"/>
                                 <operand value="1" unit="hour" xsi:type="Quantity"/>
                              </low>
                              <high name="VisitStartWithED" xsi:type="QueryLetRef"/>
                           </operand>
                        </operand>
                        <operand xsi:type="Not">
                           <operand xsi:type="IsNull">
                              <operand name="VisitStartWithED" xsi:type="QueryLetRef"/>
                           </operand>
                        </operand>
                     </where>
                     <sort>
                        <by direction="asc" xsi:type="ByExpression">
                           <expression xsi:type="End">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand name="period" xsi:type="IdentifierRef"/>
                              </operand>
                           </expression>
                        </by>
                     </sort>
                  </source>
               </expression>
            </let>
            <return>
               <expression lowClosed="true" highClosed="true" xsi:type="Interval">
                  <low xsi:type="Coalesce">
                     <operand xsi:type="Start">
                        <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand path="period" xsi:type="Property">
                              <source name="OutpatientSurgeryVisit" xsi:type="QueryLetRef"/>
                           </operand>
                        </operand>
                     </operand>
                     <operand name="VisitStartWithED" xsi:type="QueryLetRef"/>
                  </low>
                  <high xsi:type="End">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" scope="Visit" xsi:type="Property"/>
                     </operand>
                  </high>
               </expression>
            </return>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="hospitalizationWithObservationAndOutpatientSurgeryService" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Hospitalization with Observation and Outpatient Surgery Service returns the total interval from the start of any immediately prior emergency department visit, outpatient surgery visit or observation visit to the discharge of the given encounter."/>
         </annotation>
         <expression xsi:type="Query">
            <source alias="Visit">
               <expression name="TheEncounter" xsi:type="OperandRef"/>
            </source>
            <let identifier="ObsVisit">
               <expression xsi:type="Last">
                  <source xsi:type="Query">
                     <source alias="LastObs">
                        <expression dataType="fhir:Encounter" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                           <codes name="Observation Services" preserve="true" xsi:type="ValueSetRef"/>
                        </expression>
                     </source>
                     <where xsi:type="And">
                        <operand xsi:type="Equal">
                           <operand path="value" xsi:type="Property">
                              <source path="status" scope="LastObs" xsi:type="Property"/>
                           </operand>
                           <operand valueType="t:String" value="finished" xsi:type="Literal"/>
                        </operand>
                        <operand xsi:type="And">
                           <operand xsi:type="In">
                              <operand xsi:type="End">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand path="period" scope="LastObs" xsi:type="Property"/>
                                 </operand>
                              </operand>
                              <operand lowClosed="true" highClosed="true" xsi:type="Interval">
                                 <low xsi:type="Subtract">
                                    <operand xsi:type="Start">
                                       <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                          <operand path="period" scope="Visit" xsi:type="Property"/>
                                       </operand>
                                    </operand>
                                    <operand value="1" unit="hour" xsi:type="Quantity"/>
                                 </low>
                                 <high xsi:type="Start">
                                    <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                       <operand path="period" scope="Visit" xsi:type="Property"/>
                                    </operand>
                                 </high>
                              </operand>
                           </operand>
                           <operand xsi:type="Not">
                              <operand xsi:type="IsNull">
                                 <operand xsi:type="Start">
                                    <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                       <operand path="period" scope="Visit" xsi:type="Property"/>
                                    </operand>
                                 </operand>
                              </operand>
                           </operand>
                        </operand>
                     </where>
                     <sort>
                        <by direction="asc" xsi:type="ByExpression">
                           <expression xsi:type="End">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand name="period" xsi:type="IdentifierRef"/>
                              </operand>
                           </expression>
                        </by>
                     </sort>
                  </source>
               </expression>
            </let>
            <let identifier="VisitStart">
               <expression xsi:type="Coalesce">
                  <operand xsi:type="Start">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" xsi:type="Property">
                           <source name="ObsVisit" xsi:type="QueryLetRef"/>
                        </operand>
                     </operand>
                  </operand>
                  <operand xsi:type="Start">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" scope="Visit" xsi:type="Property"/>
                     </operand>
                  </operand>
               </expression>
            </let>
            <let identifier="EDVisit">
               <expression xsi:type="Last">
                  <source xsi:type="Query">
                     <source alias="LastED">
                        <expression dataType="fhir:Encounter" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                           <codes name="Emergency Department Visit" preserve="true" xsi:type="ValueSetRef"/>
                        </expression>
                     </source>
                     <where xsi:type="And">
                        <operand xsi:type="Equal">
                           <operand path="value" xsi:type="Property">
                              <source path="status" scope="LastED" xsi:type="Property"/>
                           </operand>
                           <operand valueType="t:String" value="finished" xsi:type="Literal"/>
                        </operand>
                        <operand xsi:type="And">
                           <operand xsi:type="In">
                              <operand xsi:type="End">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand path="period" scope="LastED" xsi:type="Property"/>
                                 </operand>
                              </operand>
                              <operand lowClosed="true" highClosed="true" xsi:type="Interval">
                                 <low xsi:type="Subtract">
                                    <operand name="VisitStart" xsi:type="QueryLetRef"/>
                                    <operand value="1" unit="hour" xsi:type="Quantity"/>
                                 </low>
                                 <high name="VisitStart" xsi:type="QueryLetRef"/>
                              </operand>
                           </operand>
                           <operand xsi:type="Not">
                              <operand xsi:type="IsNull">
                                 <operand name="VisitStart" xsi:type="QueryLetRef"/>
                              </operand>
                           </operand>
                        </operand>
                     </where>
                     <sort>
                        <by direction="asc" xsi:type="ByExpression">
                           <expression xsi:type="End">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand name="period" xsi:type="IdentifierRef"/>
                              </operand>
                           </expression>
                        </by>
                     </sort>
                  </source>
               </expression>
            </let>
            <let identifier="VisitStartWithED">
               <expression xsi:type="Coalesce">
                  <operand xsi:type="Start">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" xsi:type="Property">
                           <source name="EDVisit" xsi:type="QueryLetRef"/>
                        </operand>
                     </operand>
                  </operand>
                  <operand name="VisitStart" xsi:type="QueryLetRef"/>
               </expression>
            </let>
            <let identifier="OutpatientSurgeryVisit">
               <expression xsi:type="Last">
                  <source xsi:type="Query">
                     <source alias="LastSurgeryOP">
                        <expression dataType="fhir:Encounter" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                           <codes name="Outpatient Surgery Service" preserve="true" xsi:type="ValueSetRef"/>
                        </expression>
                     </source>
                     <where xsi:type="And">
                        <operand xsi:type="In">
                           <operand xsi:type="End">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand path="period" scope="LastSurgeryOP" xsi:type="Property"/>
                              </operand>
                           </operand>
                           <operand lowClosed="true" highClosed="true" xsi:type="Interval">
                              <low xsi:type="Subtract">
                                 <operand name="VisitStartWithED" xsi:type="QueryLetRef"/>
                                 <operand value="1" unit="hour" xsi:type="Quantity"/>
                              </low>
                              <high name="VisitStartWithED" xsi:type="QueryLetRef"/>
                           </operand>
                        </operand>
                        <operand xsi:type="Not">
                           <operand xsi:type="IsNull">
                              <operand name="VisitStartWithED" xsi:type="QueryLetRef"/>
                           </operand>
                        </operand>
                     </where>
                     <sort>
                        <by direction="asc" xsi:type="ByExpression">
                           <expression xsi:type="End">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand name="period" xsi:type="IdentifierRef"/>
                              </operand>
                           </expression>
                        </by>
                     </sort>
                  </source>
               </expression>
            </let>
            <return>
               <expression lowClosed="true" highClosed="true" xsi:type="Interval">
                  <low xsi:type="Coalesce">
                     <operand xsi:type="Start">
                        <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand path="period" xsi:type="Property">
                              <source name="OutpatientSurgeryVisit" xsi:type="QueryLetRef"/>
                           </operand>
                        </operand>
                     </operand>
                     <operand name="VisitStartWithED" xsi:type="QueryLetRef"/>
                  </low>
                  <high xsi:type="End">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" scope="Visit" xsi:type="Property"/>
                     </operand>
                  </high>
               </expression>
            </return>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="HospitalizationWithObservation" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Hospitalization with Observation returns the total interval from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter"/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `hospitalizationWithObservation()` instead."/>
         </annotation>
         <expression xsi:type="Query">
            <source alias="Visit">
               <expression name="TheEncounter" xsi:type="OperandRef"/>
            </source>
            <let identifier="ObsVisit">
               <expression xsi:type="Last">
                  <source xsi:type="Query">
                     <source alias="LastObs">
                        <expression dataType="fhir:Encounter" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                           <codes name="Observation Services" preserve="true" xsi:type="ValueSetRef"/>
                        </expression>
                     </source>
                     <where xsi:type="And">
                        <operand xsi:type="Equal">
                           <operand path="value" xsi:type="Property">
                              <source path="status" scope="LastObs" xsi:type="Property"/>
                           </operand>
                           <operand valueType="t:String" value="finished" xsi:type="Literal"/>
                        </operand>
                        <operand xsi:type="And">
                           <operand xsi:type="In">
                              <operand xsi:type="End">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand path="period" scope="LastObs" xsi:type="Property"/>
                                 </operand>
                              </operand>
                              <operand lowClosed="true" highClosed="true" xsi:type="Interval">
                                 <low xsi:type="Subtract">
                                    <operand xsi:type="Start">
                                       <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                          <operand path="period" scope="Visit" xsi:type="Property"/>
                                       </operand>
                                    </operand>
                                    <operand value="1" unit="hour" xsi:type="Quantity"/>
                                 </low>
                                 <high xsi:type="Start">
                                    <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                       <operand path="period" scope="Visit" xsi:type="Property"/>
                                    </operand>
                                 </high>
                              </operand>
                           </operand>
                           <operand xsi:type="Not">
                              <operand xsi:type="IsNull">
                                 <operand xsi:type="Start">
                                    <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                       <operand path="period" scope="Visit" xsi:type="Property"/>
                                    </operand>
                                 </operand>
                              </operand>
                           </operand>
                        </operand>
                     </where>
                     <sort>
                        <by direction="asc" xsi:type="ByExpression">
                           <expression xsi:type="End">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand name="period" xsi:type="IdentifierRef"/>
                              </operand>
                           </expression>
                        </by>
                     </sort>
                  </source>
               </expression>
            </let>
            <let identifier="VisitStart">
               <expression xsi:type="Coalesce">
                  <operand xsi:type="Start">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" xsi:type="Property">
                           <source name="ObsVisit" xsi:type="QueryLetRef"/>
                        </operand>
                     </operand>
                  </operand>
                  <operand xsi:type="Start">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" scope="Visit" xsi:type="Property"/>
                     </operand>
                  </operand>
               </expression>
            </let>
            <let identifier="EDVisit">
               <expression xsi:type="Last">
                  <source xsi:type="Query">
                     <source alias="LastED">
                        <expression dataType="fhir:Encounter" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                           <codes name="Emergency Department Visit" preserve="true" xsi:type="ValueSetRef"/>
                        </expression>
                     </source>
                     <where xsi:type="And">
                        <operand xsi:type="Equal">
                           <operand path="value" xsi:type="Property">
                              <source path="status" scope="LastED" xsi:type="Property"/>
                           </operand>
                           <operand valueType="t:String" value="finished" xsi:type="Literal"/>
                        </operand>
                        <operand xsi:type="And">
                           <operand xsi:type="In">
                              <operand xsi:type="End">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand path="period" scope="LastED" xsi:type="Property"/>
                                 </operand>
                              </operand>
                              <operand lowClosed="true" highClosed="true" xsi:type="Interval">
                                 <low xsi:type="Subtract">
                                    <operand name="VisitStart" xsi:type="QueryLetRef"/>
                                    <operand value="1" unit="hour" xsi:type="Quantity"/>
                                 </low>
                                 <high name="VisitStart" xsi:type="QueryLetRef"/>
                              </operand>
                           </operand>
                           <operand xsi:type="Not">
                              <operand xsi:type="IsNull">
                                 <operand name="VisitStart" xsi:type="QueryLetRef"/>
                              </operand>
                           </operand>
                        </operand>
                     </where>
                     <sort>
                        <by direction="asc" xsi:type="ByExpression">
                           <expression xsi:type="End">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand name="period" xsi:type="IdentifierRef"/>
                              </operand>
                           </expression>
                        </by>
                     </sort>
                  </source>
               </expression>
            </let>
            <return>
               <expression lowClosed="true" highClosed="true" xsi:type="Interval">
                  <low xsi:type="Coalesce">
                     <operand xsi:type="Start">
                        <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand path="period" xsi:type="Property">
                              <source name="EDVisit" xsi:type="QueryLetRef"/>
                           </operand>
                        </operand>
                     </operand>
                     <operand name="VisitStart" xsi:type="QueryLetRef"/>
                  </low>
                  <high xsi:type="End">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" scope="Visit" xsi:type="Property"/>
                     </operand>
                  </high>
               </expression>
            </return>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="hospitalizationWithObservation" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Hospitalization with Observation returns the total interval from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter"/>
         </annotation>
         <expression xsi:type="Query">
            <source alias="Visit">
               <expression name="TheEncounter" xsi:type="OperandRef"/>
            </source>
            <let identifier="ObsVisit">
               <expression xsi:type="Last">
                  <source xsi:type="Query">
                     <source alias="LastObs">
                        <expression dataType="fhir:Encounter" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                           <codes name="Observation Services" preserve="true" xsi:type="ValueSetRef"/>
                        </expression>
                     </source>
                     <where xsi:type="And">
                        <operand xsi:type="Equal">
                           <operand path="value" xsi:type="Property">
                              <source path="status" scope="LastObs" xsi:type="Property"/>
                           </operand>
                           <operand valueType="t:String" value="finished" xsi:type="Literal"/>
                        </operand>
                        <operand xsi:type="And">
                           <operand xsi:type="In">
                              <operand xsi:type="End">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand path="period" scope="LastObs" xsi:type="Property"/>
                                 </operand>
                              </operand>
                              <operand lowClosed="true" highClosed="true" xsi:type="Interval">
                                 <low xsi:type="Subtract">
                                    <operand xsi:type="Start">
                                       <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                          <operand path="period" scope="Visit" xsi:type="Property"/>
                                       </operand>
                                    </operand>
                                    <operand value="1" unit="hour" xsi:type="Quantity"/>
                                 </low>
                                 <high xsi:type="Start">
                                    <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                       <operand path="period" scope="Visit" xsi:type="Property"/>
                                    </operand>
                                 </high>
                              </operand>
                           </operand>
                           <operand xsi:type="Not">
                              <operand xsi:type="IsNull">
                                 <operand xsi:type="Start">
                                    <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                       <operand path="period" scope="Visit" xsi:type="Property"/>
                                    </operand>
                                 </operand>
                              </operand>
                           </operand>
                        </operand>
                     </where>
                     <sort>
                        <by direction="asc" xsi:type="ByExpression">
                           <expression xsi:type="End">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand name="period" xsi:type="IdentifierRef"/>
                              </operand>
                           </expression>
                        </by>
                     </sort>
                  </source>
               </expression>
            </let>
            <let identifier="VisitStart">
               <expression xsi:type="Coalesce">
                  <operand xsi:type="Start">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" xsi:type="Property">
                           <source name="ObsVisit" xsi:type="QueryLetRef"/>
                        </operand>
                     </operand>
                  </operand>
                  <operand xsi:type="Start">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" scope="Visit" xsi:type="Property"/>
                     </operand>
                  </operand>
               </expression>
            </let>
            <let identifier="EDVisit">
               <expression xsi:type="Last">
                  <source xsi:type="Query">
                     <source alias="LastED">
                        <expression dataType="fhir:Encounter" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-encounter" codeProperty="type" codeComparator="in" xsi:type="Retrieve">
                           <codes name="Emergency Department Visit" preserve="true" xsi:type="ValueSetRef"/>
                        </expression>
                     </source>
                     <where xsi:type="And">
                        <operand xsi:type="Equal">
                           <operand path="value" xsi:type="Property">
                              <source path="status" scope="LastED" xsi:type="Property"/>
                           </operand>
                           <operand valueType="t:String" value="finished" xsi:type="Literal"/>
                        </operand>
                        <operand xsi:type="And">
                           <operand xsi:type="In">
                              <operand xsi:type="End">
                                 <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                    <operand path="period" scope="LastED" xsi:type="Property"/>
                                 </operand>
                              </operand>
                              <operand lowClosed="true" highClosed="true" xsi:type="Interval">
                                 <low xsi:type="Subtract">
                                    <operand name="VisitStart" xsi:type="QueryLetRef"/>
                                    <operand value="1" unit="hour" xsi:type="Quantity"/>
                                 </low>
                                 <high name="VisitStart" xsi:type="QueryLetRef"/>
                              </operand>
                           </operand>
                           <operand xsi:type="Not">
                              <operand xsi:type="IsNull">
                                 <operand name="VisitStart" xsi:type="QueryLetRef"/>
                              </operand>
                           </operand>
                        </operand>
                     </where>
                     <sort>
                        <by direction="asc" xsi:type="ByExpression">
                           <expression xsi:type="End">
                              <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                 <operand name="period" xsi:type="IdentifierRef"/>
                              </operand>
                           </expression>
                        </by>
                     </sort>
                  </source>
               </expression>
            </let>
            <return>
               <expression lowClosed="true" highClosed="true" xsi:type="Interval">
                  <low xsi:type="Coalesce">
                     <operand xsi:type="Start">
                        <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand path="period" xsi:type="Property">
                              <source name="EDVisit" xsi:type="QueryLetRef"/>
                           </operand>
                        </operand>
                     </operand>
                     <operand name="VisitStart" xsi:type="QueryLetRef"/>
                  </low>
                  <high xsi:type="End">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" scope="Visit" xsi:type="Property"/>
                     </operand>
                  </high>
               </expression>
            </return>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="HospitalizationWithObservationLengthofStay" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Hospitalization with Observation Length of Stay returns the length in days from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter"/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `hospitalizationWithObservationLengthofStay()` instead."/>
         </annotation>
         <expression name="LengthInDays" xsi:type="FunctionRef">
            <operand name="HospitalizationWithObservation" xsi:type="FunctionRef">
               <operand name="TheEncounter" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="hospitalizationWithObservationLengthofStay" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Hospitalization with Observation Length of Stay returns the length in days from the start of any immediately prior emergency department visit through the observation visit to the discharge of the given encounter"/>
         </annotation>
         <expression name="LengthInDays" xsi:type="FunctionRef">
            <operand name="HospitalizationWithObservation" xsi:type="FunctionRef">
               <operand name="TheEncounter" xsi:type="OperandRef"/>
            </operand>
         </expression>
         <operand name="TheEncounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="FirstInpatientIntensiveCareUnit" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="First Inpatient Intensive Care Unit returns the first intensive care unit for the given encounter, without considering any immediately prior emergency department visit."/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `firstInpatientIntensiveCareUnit()` instead."/>
         </annotation>
         <expression xsi:type="First">
            <source xsi:type="Query">
               <source alias="HospitalLocation">
                  <expression path="location" xsi:type="Property">
                     <source name="Encounter" xsi:type="OperandRef"/>
                  </expression>
               </source>
               <where xsi:type="And">
                  <operand xsi:type="AnyInValueSet">
                     <codes xsi:type="Query">
                        <source alias="$this">
                           <expression path="type" xsi:type="Property">
                              <source name="GetLocation" xsi:type="FunctionRef">
                                 <operand path="location" scope="HospitalLocation" xsi:type="Property"/>
                              </source>
                           </expression>
                        </source>
                        <return distinct="false">
                           <expression name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                              <operand name="$this" xsi:type="AliasRef"/>
                           </expression>
                        </return>
                     </codes>
                     <valueset name="Intensive Care Unit" preserve="true"/>
                  </operand>
                  <operand xsi:type="IncludedIn">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" scope="HospitalLocation" xsi:type="Property"/>
                     </operand>
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" xsi:type="Property">
                           <source name="Encounter" xsi:type="OperandRef"/>
                        </operand>
                     </operand>
                  </operand>
               </where>
               <sort>
                  <by direction="asc" xsi:type="ByExpression">
                     <expression xsi:type="Start">
                        <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand name="period" xsi:type="IdentifierRef"/>
                        </operand>
                     </expression>
                  </by>
               </sort>
            </source>
         </expression>
         <operand name="Encounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="firstInpatientIntensiveCareUnit" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="First Inpatient Intensive Care Unit returns the first intensive care unit for the given encounter, without considering any immediately prior emergency department visit."/>
         </annotation>
         <expression xsi:type="First">
            <source xsi:type="Query">
               <source alias="HospitalLocation">
                  <expression path="location" xsi:type="Property">
                     <source name="Encounter" xsi:type="OperandRef"/>
                  </expression>
               </source>
               <where xsi:type="And">
                  <operand xsi:type="AnyInValueSet">
                     <codes xsi:type="Query">
                        <source alias="$this">
                           <expression path="type" xsi:type="Property">
                              <source name="GetLocation" xsi:type="FunctionRef">
                                 <operand path="location" scope="HospitalLocation" xsi:type="Property"/>
                              </source>
                           </expression>
                        </source>
                        <return distinct="false">
                           <expression name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                              <operand name="$this" xsi:type="AliasRef"/>
                           </expression>
                        </return>
                     </codes>
                     <valueset name="Intensive Care Unit" preserve="true"/>
                  </operand>
                  <operand xsi:type="IncludedIn">
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" scope="HospitalLocation" xsi:type="Property"/>
                     </operand>
                     <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                        <operand path="period" xsi:type="Property">
                           <source name="Encounter" xsi:type="OperandRef"/>
                        </operand>
                     </operand>
                  </operand>
               </where>
               <sort>
                  <by direction="asc" xsi:type="ByExpression">
                     <expression xsi:type="Start">
                        <operand name="ToInterval" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                           <operand name="period" xsi:type="IdentifierRef"/>
                        </operand>
                     </expression>
                  </by>
               </sort>
            </source>
         </expression>
         <operand name="Encounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="EncounterDiagnosis" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the Condition resource referenced by the `diagnosis.condition` element of the Encounter"/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `encounterDiagnosis()` instead."/>
         </annotation>
         <expression xsi:type="Query">
            <source alias="D">
               <expression path="diagnosis" xsi:type="Property">
                  <source name="Encounter" xsi:type="OperandRef"/>
               </expression>
            </source>
            <return>
               <expression xsi:type="SingletonFrom">
                  <operand xsi:type="Query">
                     <source alias="C">
                        <expression dataType="fhir:Condition" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-condition" xsi:type="Retrieve"/>
                     </source>
                     <where xsi:type="Equal">
                        <operand path="value" xsi:type="Property">
                           <source path="id" scope="C" xsi:type="Property"/>
                        </operand>
                        <operand name="getId" libraryName="QICoreCommon" xsi:type="FunctionRef">
                           <operand path="value" xsi:type="Property">
                              <source path="reference" xsi:type="Property">
                                 <source path="condition" scope="D" xsi:type="Property"/>
                              </source>
                           </operand>
                        </operand>
                     </where>
                  </operand>
               </expression>
            </return>
         </expression>
         <operand name="Encounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="encounterDiagnosis" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the Condition resources referenced by the diagnosis element of the Encounter"/>
         </annotation>
         <expression xsi:type="Query">
            <source alias="D">
               <expression path="diagnosis" xsi:type="Property">
                  <source name="Encounter" xsi:type="OperandRef"/>
               </expression>
            </source>
            <return>
               <expression xsi:type="SingletonFrom">
                  <operand xsi:type="Query">
                     <source alias="C">
                        <expression dataType="fhir:Condition" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-condition" xsi:type="Retrieve"/>
                     </source>
                     <where xsi:type="Equal">
                        <operand path="value" xsi:type="Property">
                           <source path="id" scope="C" xsi:type="Property"/>
                        </operand>
                        <operand name="getId" libraryName="QICoreCommon" xsi:type="FunctionRef">
                           <operand path="value" xsi:type="Property">
                              <source path="reference" xsi:type="Property">
                                 <source path="condition" scope="D" xsi:type="Property"/>
                              </source>
                           </operand>
                        </operand>
                     </where>
                  </operand>
               </expression>
            </return>
         </expression>
         <operand name="Encounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="GetCondition" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the Condition resource for the given reference"/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `getCondition()` instead"/>
         </annotation>
         <expression xsi:type="SingletonFrom">
            <operand xsi:type="Query">
               <source alias="C">
                  <expression dataType="fhir:Condition" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-condition" xsi:type="Retrieve"/>
               </source>
               <where xsi:type="Equal">
                  <operand path="value" xsi:type="Property">
                     <source path="id" scope="C" xsi:type="Property"/>
                  </operand>
                  <operand name="getId" libraryName="QICoreCommon" xsi:type="FunctionRef">
                     <operand path="value" xsi:type="Property">
                        <source path="reference" xsi:type="Property">
                           <source name="reference" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                  </operand>
               </where>
            </operand>
         </expression>
         <operand name="reference">
            <operandTypeSpecifier name="fhir:Reference" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="getCondition" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the Condition resource for the given reference"/>
         </annotation>
         <expression xsi:type="SingletonFrom">
            <operand xsi:type="Query">
               <source alias="C">
                  <expression dataType="fhir:Condition" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-condition" xsi:type="Retrieve"/>
               </source>
               <where xsi:type="Equal">
                  <operand path="value" xsi:type="Property">
                     <source path="id" scope="C" xsi:type="Property"/>
                  </operand>
                  <operand name="getId" libraryName="QICoreCommon" xsi:type="FunctionRef">
                     <operand path="value" xsi:type="Property">
                        <source path="reference" xsi:type="Property">
                           <source name="reference" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                  </operand>
               </where>
            </operand>
         </expression>
         <operand name="reference">
            <operandTypeSpecifier name="fhir:Reference" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="PrincipalDiagnosis" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the condition that is specified as the principal diagnosis for the encounter"/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `principalDiagnosis()` instead."/>
         </annotation>
         <expression xsi:type="SingletonFrom">
            <operand xsi:type="Query">
               <source alias="PD">
                  <expression xsi:type="Query">
                     <source alias="D">
                        <expression path="diagnosis" xsi:type="Property">
                           <source name="Encounter" xsi:type="OperandRef"/>
                        </expression>
                     </source>
                     <where xsi:type="Equal">
                        <operand path="value" xsi:type="Property">
                           <source path="rank" scope="D" xsi:type="Property"/>
                        </operand>
                        <operand valueType="t:Integer" value="1" xsi:type="Literal"/>
                     </where>
                  </expression>
               </source>
               <return>
                  <expression xsi:type="SingletonFrom">
                     <operand xsi:type="Query">
                        <source alias="C">
                           <expression dataType="fhir:Condition" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-condition" xsi:type="Retrieve"/>
                        </source>
                        <where xsi:type="Equal">
                           <operand path="value" xsi:type="Property">
                              <source path="id" scope="C" xsi:type="Property"/>
                           </operand>
                           <operand name="getId" libraryName="QICoreCommon" xsi:type="FunctionRef">
                              <operand path="value" xsi:type="Property">
                                 <source path="reference" xsi:type="Property">
                                    <source path="condition" scope="PD" xsi:type="Property"/>
                                 </source>
                              </operand>
                           </operand>
                        </where>
                     </operand>
                  </expression>
               </return>
            </operand>
         </expression>
         <operand name="Encounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="principalDiagnosis" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the condition that is specified as the principal diagnosis for the encounter"/>
         </annotation>
         <expression xsi:type="SingletonFrom">
            <operand xsi:type="Query">
               <source alias="PD">
                  <expression xsi:type="Query">
                     <source alias="D">
                        <expression path="diagnosis" xsi:type="Property">
                           <source name="Encounter" xsi:type="OperandRef"/>
                        </expression>
                     </source>
                     <where xsi:type="Equal">
                        <operand path="value" xsi:type="Property">
                           <source path="rank" scope="D" xsi:type="Property"/>
                        </operand>
                        <operand valueType="t:Integer" value="1" xsi:type="Literal"/>
                     </where>
                  </expression>
               </source>
               <return>
                  <expression xsi:type="SingletonFrom">
                     <operand xsi:type="Query">
                        <source alias="C">
                           <expression dataType="fhir:Condition" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-condition" xsi:type="Retrieve"/>
                        </source>
                        <where xsi:type="Equal">
                           <operand path="value" xsi:type="Property">
                              <source path="id" scope="C" xsi:type="Property"/>
                           </operand>
                           <operand name="getId" libraryName="QICoreCommon" xsi:type="FunctionRef">
                              <operand path="value" xsi:type="Property">
                                 <source path="reference" xsi:type="Property">
                                    <source path="condition" scope="PD" xsi:type="Property"/>
                                 </source>
                              </operand>
                           </operand>
                        </where>
                     </operand>
                  </expression>
               </return>
            </operand>
         </expression>
         <operand name="Encounter">
            <operandTypeSpecifier name="fhir:Encounter" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="getLocation" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the Location resource specified by the given reference."/>
         </annotation>
         <expression xsi:type="SingletonFrom">
            <operand xsi:type="Query">
               <source alias="L">
                  <expression dataType="fhir:Location" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-location" xsi:type="Retrieve"/>
               </source>
               <where xsi:type="Equal">
                  <operand path="value" xsi:type="Property">
                     <source path="id" scope="L" xsi:type="Property"/>
                  </operand>
                  <operand name="getId" libraryName="QICoreCommon" xsi:type="FunctionRef">
                     <operand path="value" xsi:type="Property">
                        <source path="reference" xsi:type="Property">
                           <source name="reference" xsi:type="OperandRef"/>
                        </source>
                     </operand>
                  </operand>
               </where>
            </operand>
         </expression>
         <operand name="reference">
            <operandTypeSpecifier name="fhir:Reference" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="GetMedicationCode" context="Patient" accessLevel="Public" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the medication code for the given MedicationRequest"/>
            <a:t name="deprecated" value="This function is deprecated. Use the fluent function `getMedicationCode()` instead."/>
         </annotation>
         <expression xsi:type="If">
            <condition xsi:type="Is">
               <operand name="ToValue" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand path="medication" xsi:type="Property">
                     <source name="request" xsi:type="OperandRef"/>
                  </operand>
               </operand>
               <isTypeSpecifier name="t:Concept" xsi:type="NamedTypeSpecifier"/>
            </condition>
            <then strict="false" xsi:type="As">
               <operand name="ToValue" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand path="medication" xsi:type="Property">
                     <source name="request" xsi:type="OperandRef"/>
                  </operand>
               </operand>
               <asTypeSpecifier name="t:Concept" xsi:type="NamedTypeSpecifier"/>
            </then>
            <else name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
               <operand path="code" xsi:type="Property">
                  <source xsi:type="SingletonFrom">
                     <operand xsi:type="Query">
                        <source alias="M">
                           <expression dataType="fhir:Medication" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-medication" xsi:type="Retrieve"/>
                        </source>
                        <where xsi:type="Equal">
                           <operand path="value" xsi:type="Property">
                              <source path="id" scope="M" xsi:type="Property"/>
                           </operand>
                           <operand name="getId" libraryName="QICoreCommon" xsi:type="FunctionRef">
                              <operand path="value" xsi:type="Property">
                                 <source path="reference" xsi:type="Property">
                                    <source strict="false" xsi:type="As">
                                       <operand name="ToValue" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                          <operand path="medication" xsi:type="Property">
                                             <source name="request" xsi:type="OperandRef"/>
                                          </operand>
                                       </operand>
                                       <asTypeSpecifier name="fhir:Reference" xsi:type="NamedTypeSpecifier"/>
                                    </source>
                                 </source>
                              </operand>
                           </operand>
                        </where>
                     </operand>
                  </source>
               </operand>
            </else>
         </expression>
         <operand name="request">
            <operandTypeSpecifier name="fhir:MedicationRequest" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
      <def name="getMedicationCode" context="Patient" accessLevel="Public" fluent="true" xsi:type="FunctionDef">
         <annotation xsi:type="a:Annotation">
            <a:t name="description" value="Returns the medication code for the given MedicationRequest"/>
         </annotation>
         <expression xsi:type="If">
            <condition xsi:type="Is">
               <operand name="ToValue" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand path="medication" xsi:type="Property">
                     <source name="request" xsi:type="OperandRef"/>
                  </operand>
               </operand>
               <isTypeSpecifier name="t:Concept" xsi:type="NamedTypeSpecifier"/>
            </condition>
            <then strict="false" xsi:type="As">
               <operand name="ToValue" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                  <operand path="medication" xsi:type="Property">
                     <source name="request" xsi:type="OperandRef"/>
                  </operand>
               </operand>
               <asTypeSpecifier name="t:Concept" xsi:type="NamedTypeSpecifier"/>
            </then>
            <else name="ToConcept" libraryName="FHIRHelpers" xsi:type="FunctionRef">
               <operand path="code" xsi:type="Property">
                  <source xsi:type="SingletonFrom">
                     <operand xsi:type="Query">
                        <source alias="M">
                           <expression dataType="fhir:Medication" templateId="http://hl7.org/fhir/us/qicore/StructureDefinition/qicore-medication" xsi:type="Retrieve"/>
                        </source>
                        <where xsi:type="Equal">
                           <operand path="value" xsi:type="Property">
                              <source path="id" scope="M" xsi:type="Property"/>
                           </operand>
                           <operand name="getId" libraryName="QICoreCommon" xsi:type="FunctionRef">
                              <operand path="value" xsi:type="Property">
                                 <source path="reference" xsi:type="Property">
                                    <source strict="false" xsi:type="As">
                                       <operand name="ToValue" libraryName="FHIRHelpers" xsi:type="FunctionRef">
                                          <operand path="medication" xsi:type="Property">
                                             <source name="request" xsi:type="OperandRef"/>
                                          </operand>
                                       </operand>
                                       <asTypeSpecifier name="fhir:Reference" xsi:type="NamedTypeSpecifier"/>
                                    </source>
                                 </source>
                              </operand>
                           </operand>
                        </where>
                     </operand>
                  </source>
               </operand>
            </else>
         </expression>
         <operand name="request">
            <operandTypeSpecifier name="fhir:MedicationRequest" xsi:type="NamedTypeSpecifier"/>
         </operand>
      </def>
   </statements>
</library>